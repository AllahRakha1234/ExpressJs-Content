 
'*************************************************************** Coder's Gyan Chanell *******************************************************************************

>>>> To set port through terminal: PORT=5000 node server
>>>> To use scripts commands in json file: npm run commandName
>>>> Various types of middleware are used ===> Custom, Third Party (e.g Cors), Built in Middlewares
>>>> res.status(422) ==> Unprocessable Entity
>>>> XHR ===> In the browser to see the requests status
>>>> ***** Error handling is important in Express because in Php like server if a error occur only that particular application part stops working.But in Express all 
the application part stop working.So error handling is crucial part in Express ===> Throw new Error('Error Message')

>>>>>>>>>>> PATH MODULE (USE OF RESOLVE AND JOIN) <<<<<<<<<<<<<<<<<<<<<<

path.resolve() and path.join() are both functions provided by Node.js's path module for manipulating file paths, but they have different use cases and behaviors.

path.resolve():
This function is used to resolve an absolute path from relative paths or segments.
It takes multiple path segments as arguments and returns an absolute path.
If the arguments are absolute paths, the last argument will be considered the result.
If the arguments are relative paths, they will be resolved relative to the current working directory.
This function doesn't consider the existing paths; it just constructs an absolute path based on the provided segments.
Example:
const resolvedPath = path.resolve('/foo', 'bar', 'baz');
// Result: '/foo/bar/baz'

path.join():
This function is used to concatenate multiple path segments into a single path.
It constructs a path by concatenating the provided segments using the platform-specific separator (/ on Unix-like systems, \ on Windows).
It resolves relative paths to each other, but it doesn't resolve them to an absolute path based on the current working directory.
Example:
const joinedPath = path.join('/foo', 'bar', 'baz');
// Result: '/foo/bar/baz' (Unix-like system)

In the context of your previous question, where you wanted to navigate up one directory level from a specific path, 
you would typically use path.join() to construct the correct path to your desired file. 
This is because you're working with relative paths and you want to manipulate them in relation to each other. 
If you're dealing with converting a relative path to an absolute path, path.resolve() would be more appropriate.


>>>>>>>>>>>>>>> USE OF PARAMS IN THE ROUTER <<<<<<<<<<<<<<<<<<<<<<<<<<

In the provided code snippet, params is a property of the req (request) object in a Node.js Express application. It is used to access route parameters that
are specified in the URL of the incoming HTTP request.Route parameters are placeholders in the URL path that can capture dynamic values, 
making your routes more flexible and allowing you to work with variable data.

In the context of your code:
router.delete("/api/products/:productId/Id", (req, res) => {
    products = products.filter((product) => product !== req.params.productId);
    res.send("Ok");
});

/api/products/:productId/Id is the route defined on your Express router. 
The :productId part is a route parameter that captures the value from the actual URL. 
For example, if the URL is /api/products/123/Id, then req.params.productId will be "123".

In the route handler function, req.params is an object containing the parameter values extracted from the URL.
 In this case, req.params.productId gives you access to the value captured by the :productId parameter in the URL.